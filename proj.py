#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.25.1
#  in conjunction with Tcl version 8.6
#    May 14, 2020 12:38:23 PM IST  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import proj_support
import os.path
from tkinter import messagebox as mb

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    root = tk.Tk()
    proj_support.set_Tk_var()
    top = Toplevel1 (root)
    proj_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    rt = root
    w = tk.Toplevel (root)
    proj_support.set_Tk_var()
    top = Toplevel1 (w)
    proj_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font11 = "-family {DejaVu Sans} -size 11 -weight bold -slant "  \
            "italic -underline 0 -overstrike 0"
        font13 = "-family {DejaVu Sans} -size 13 -weight bold -slant "  \
            "italic -underline 1 -overstrike 0"
        font14 = "-family {DejaVu Sans} -size 12 -weight bold -slant "  \
            "italic -underline 1 -overstrike 0"
        font21 = "-family {Noto Serif} -size 21 -weight bold -slant "  \
            "italic -underline 1 -overstrike 0"
        font9 = "-family {DejaVu Sans} -size 10 -weight bold -slant "  \
            "italic -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("817x450+259+162")
        top.title("Railways")
        top.configure(background="#878787")
        top.configure(highlightcolor="black")

        self.Labelframe1 = tk.LabelFrame(top)
        self.Labelframe1.place(relx=0.012, rely=0.378, relheight=0.367
                , relwidth=0.49)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(font="-family {DejaVu Sans} -size 13 -weight bold -slant italic -underline 1")
        self.Labelframe1.configure(text='''Train Details :''')
        self.Labelframe1.configure(background="#878787")

        self.Label3 = tk.Label(self.Labelframe1)
        self.Label3.place(relx=0.025, rely=0.242, height=22, width=119
                , bordermode='ignore')
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(background="#878787")
        self.Label3.configure(font=font11)
        self.Label3.configure(text='''Train Name :''')

        self.Label4 = tk.Label(self.Labelframe1)
        self.Label4.place(relx=0.025, rely=0.424, height=22, width=114
                , bordermode='ignore')
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(background="#878787")
        self.Label4.configure(font=font11)
        self.Label4.configure(text='''Train No :''')

        self.Label5 = tk.Label(self.Labelframe1)
        self.Label5.place(relx=0.025, rely=0.606, height=21, width=119
                , bordermode='ignore')
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(background="#878787")
        self.Label5.configure(font=font11)
        self.Label5.configure(text='''From :''')

        self.Label6 = tk.Label(self.Labelframe1)
        self.Label6.place(relx=0.0, rely=0.788, height=22, width=125
                , bordermode='ignore')
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(background="#878787")
        self.Label6.configure(font=font11)
        self.Label6.configure(text='''To :''')

        self.Entry3 = tk.Entry(self.Labelframe1)
        self.Entry3.place(relx=0.325, rely=0.606, height=23, relwidth=0.615
                , bordermode='ignore')
        self.Entry3.configure(background="white")
        self.Entry3.configure(foreground="#292929")
        self.Entry3.configure(font="TkFixedFont")
        self.Entry3.configure(selectbackground="#c4c4c4")

        self.Entry4 = tk.Entry(self.Labelframe1)
        self.Entry4.place(relx=0.325, rely=0.788, height=23, relwidth=0.615
                , bordermode='ignore')
        self.Entry4.configure(background="white")
        self.Entry4.configure(foreground="#292929")
        self.Entry4.configure(font="TkFixedFont")
        self.Entry4.configure(selectbackground="#c4c4c4")

        self.TrainName = ttk.Combobox(self.Labelframe1)
        self.TrainName['values']=('Shatabdhi','Rani Chenamma','Vishwamanav Express','Intercity Express')
        self.TrainName.place(relx=0.325, rely=0.242, relheight=0.127
                , relwidth=0.618, bordermode='ignore')
        self.TrainName.configure(takefocus="")

        self.TrainNo = ttk.Combobox(self.Labelframe1)
        self.TrainNo['values']=('111','222','333','444','555','666')
        self.TrainNo.place(relx=0.325, rely=0.424, relheight=0.127
                , relwidth=0.618, bordermode='ignore')
        '''self.TrainNo.configure(textvariable=proj_support.combobox)   (commented line)'''

        self.Labelframe3 = tk.LabelFrame(top)
        self.Labelframe3.place(relx=0.012, rely=0.756, relheight=0.211
                , relwidth=0.49)
        self.Labelframe3.configure(relief='groove')
        self.Labelframe3.configure(font=font13)
        self.Labelframe3.configure(text='''Requirements :''')
        self.Labelframe3.configure(background="#878787")

        self.Type = ttk.Combobox(self.Labelframe3)
        self.Type.place(relx=0.35, rely=0.316, relheight=0.221
                , relwidth=0.568, bordermode='ignore')
        self.Type['values']=('AC','NON-AC','GENRAL','SEATER')

        self.seat = ttk.Combobox(self.Labelframe3)
        self.seat.place(relx=0.35, rely=0.632, relheight=0.221
                , relwidth=0.568, bordermode='ignore')
        self.seat['values']=('1','2','3','4','5','6')
        self.seat.configure(takefocus="")

        self.Label9 = tk.Label(self.Labelframe3)
        self.Label9.place(relx=0.025, rely=0.316, height=22, width=118
                , bordermode='ignore')
        self.Label9.configure(background="#878787")
        self.Label9.configure(font=font11)
        self.Label9.configure(text='''Type of seat :''')

        self.Label10 = tk.Label(self.Labelframe3)
        self.Label10.place(relx=0.05, rely=0.632, height=22, width=108
                , bordermode='ignore')
        self.Label10.configure(background="#878787")
        self.Label10.configure(font=font11)
        self.Label10.configure(text='''No of seats :''')

        global _images
        _images = (

         tk.PhotoImage("img_close", data='''R0lGODlhDAAMAIQUADIyMjc3Nzk5OT09PT
                 8/P0JCQkVFRU1NTU5OTlFRUVZWVmBgYGF hYWlpaXt7e6CgoLm5ucLCwszMzNbW
                 1v//////////////////////////////////// ///////////yH5BAEKAB8ALA
                 AAAAAMAAwAAAUt4CeOZGmaA5mSyQCIwhCUSwEIxHHW+ fkxBgPiBDwshCWHQfc5
                 KkoNUtRHpYYAADs= '''),

         tk.PhotoImage("img_closeactive", data='''R0lGODlhDAAMAIQcALwuEtIzFL46
                 INY0Fdk2FsQ8IdhAI9pAIttCJNlKLtpLL9pMMMNTP cVTPdpZQOBbQd60rN+1rf
                 Czp+zLxPbMxPLX0vHY0/fY0/rm4vvx8Pvy8fzy8P//////// ///////yH5BAEK
                 AB8ALAAAAAAMAAwAAAVHYLQQZEkukWKuxEgg1EPCcilx24NcHGYWFhx P0zANBE
                 GOhhFYGSocTsax2imDOdNtiez9JszjpEg4EAaA5jlNUEASLFICEgIAOw== '''),

         tk.PhotoImage("img_closepressed", data='''R0lGODlhDAAMAIQeAJ8nD64qELE
                 rELMsEqIyG6cyG7U1HLY2HrY3HrhBKrlCK6pGM7lD LKtHM7pKNL5MNtiViNaon
                 +GqoNSyq9WzrNyyqtuzq+O0que/t+bIwubJw+vJw+vTz+zT z////////yH5BAE
                 KAB8ALAAAAAAMAAwAAAVJIMUMZEkylGKuwzgc0kPCcgl123NcHWYW Fs6Gp2mYB
                 IRgR7MIrAwVDifjWO2WwZzpxkxyfKVCpImMGAeIgQDgVLMHikmCRUpMQgA7 ''')
        )

        self.style.element_create("close", "image", "img_close",
               ("active", "pressed", "!disabled", "img_closepressed"),
               ("active", "alternate", "!disabled",
               "img_closeactive"), border=8, sticky='')

        self.style.layout("ClosetabNotebook", [("ClosetabNotebook.client",
                                     {"sticky": "nswe"})])
        self.style.layout("ClosetabNotebook.Tab", [
            ("ClosetabNotebook.tab",
              { "sticky": "nswe",
                "children": [
                    ("ClosetabNotebook.padding", {
                        "side": "top",
                        "sticky": "nswe",
                        "children": [
                            ("ClosetabNotebook.focus", {
                                "side": "top",
                                "sticky": "nswe",
                                "children": [
                                    ("ClosetabNotebook.label", {"side":
                                      "left", "sticky": ''}),
                                    ("ClosetabNotebook.close", {"side":
                                        "left", "sticky": ''}),]})]})]})])

        PNOTEBOOK = "ClosetabNotebook" 

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.PNotebook1 = ttk.Notebook(top)
        self.PNotebook1.place(relx=0.514, rely=0.378, relheight=0.591
                , relwidth=0.48)
        self.PNotebook1.configure(takefocus="")
        self.PNotebook1.configure(style=PNOTEBOOK)
        self.PNotebook1_t0 = tk.Frame(self.PNotebook1)
        self.PNotebook1.add(self.PNotebook1_t0, padding=3)
        self.PNotebook1.tab(0, text="Page 1",compound="none",underline="-1",)
        self.PNotebook1_t1 = tk.Frame(self.PNotebook1)
        self.PNotebook1.add(self.PNotebook1_t1, padding=3)
        self.PNotebook1.tab(1, text="Page 2",compound="none",underline="-1",)
        self.PNotebook1_t1.configure(background="#878787")

        self.Labelframe2 = tk.LabelFrame(self.PNotebook1_t0)
        self.Labelframe2.place(relx=0.026, rely=0.042, relheight=0.938
                , relwidth=0.974)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(font=font14)
        self.Labelframe2.configure(text='''Customer Details :''')
        self.Labelframe2.configure(background="#878787")

        self.Label7 = tk.Label(self.Labelframe2)
        self.Label7.place(relx=0.026, rely=0.178, height=21, width=99
                , bordermode='ignore')
        self.Label7.configure(background="#878787")
        self.Label7.configure(font=font11)
        self.Label7.configure(text='''Name :''')

        self.Label11 = tk.Label(self.Labelframe2)
        self.Label11.place(relx=0.026, rely=0.311, height=21, width=99
                , bordermode='ignore')
        self.Label11.configure(background="#878787")
        self.Label11.configure(font=font11)
        self.Label11.configure(text='''Age :''')

        self.Label12 = tk.Label(self.Labelframe2)
        self.Label12.place(relx=0.026, rely=0.444, height=21, width=99
                , bordermode='ignore')
        self.Label12.configure(background="#878787")
        self.Label12.configure(font=font11)
        self.Label12.configure(text='''phone no:''')

        self.Label13 = tk.Label(self.Labelframe2)
        self.Label13.place(relx=0.026, rely=0.578, height=22, width=99
                , bordermode='ignore')
        self.Label13.configure(background="#878787")
        self.Label13.configure(font=font11)
        self.Label13.configure(text='''Aadhar no :''')

        self.Entry1 = tk.Entry(self.Labelframe2)
        self.Entry1.place(relx=0.289, rely=0.178, height=23, relwidth=0.595
                , bordermode='ignore')
        self.Entry1.configure(background="white")
        self.Entry1.configure(foreground="#292929")
        self.Entry1.configure(font="TkFixedFont")

        self.Entry2 = tk.Entry(self.Labelframe2)
        self.Entry2.place(relx=0.289, rely=0.311, height=23, relwidth=0.595
                , bordermode='ignore')
        self.Entry2.configure(background="white")
        self.Entry2.configure(foreground="#292929")
        self.Entry2.configure(font="TkFixedFont")

        self.Entry5 = tk.Entry(self.Labelframe2)
        self.Entry5.place(relx=0.289, rely=0.444, height=23, relwidth=0.595
                , bordermode='ignore')
        self.Entry5.configure(background="white")
        self.Entry5.configure(foreground="#292929")
        self.Entry5.configure(font="TkFixedFont")

        self.Entry6 = tk.Entry(self.Labelframe2)
        self.Entry6.place(relx=0.289, rely=0.578, height=23, relwidth=0.595
                , bordermode='ignore')
        self.Entry6.configure(background="white")
        self.Entry6.configure(foreground="#292929")
        self.Entry6.configure(font="TkFixedFont")

        self.Label14 = tk.Label(self.Labelframe2)
        self.Label14.place(relx=0.026, rely=0.711, height=21, width=89
                , bordermode='ignore')
        self.Label14.configure(background="#878787")
        self.Label14.configure(font=font11)
        self.Label14.configure(text='''Email id :''')

        self.Entry7 = tk.Entry(self.Labelframe2)
        self.Entry7.place(relx=0.289, rely=0.711, height=23, relwidth=0.595
                , bordermode='ignore')
        self.Entry7.configure(background="white")
        self.Entry7.configure(foreground="#292929")
        self.Entry7.configure(font="TkFixedFont")

        self.Button1 = tk.Button(self.Labelframe2)
        self.Button1.place(relx=0.632, rely=0.889, height=21, width=131
                , bordermode='ignore')
        self.Button1.configure(font=font9)
        self.Button1.configure(text='''View all''')

        self.B1 = tk.Button(self.Labelframe2)
        self.B1.place(relx=0.242, rely=0.889, height=21, width=131
                , bordermode='ignore')
        self.B1.configure(font=font9)
        self.B1.configure(text='''Submit''')

        self.Label2 = tk.Label(self.Labelframe2)
        self.Label2.place(relx=1.671, rely=0.378, height=105, width=485
                , bordermode='ignore')
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(background="#ffffff")
        self.Label2.configure(borderwidth="4")
        self.Label2.configure(font="-family {DejaVu Sans} -size 17 -weight bold -slant italic")
        self.Label2.configure(text='''RAILWAY RESERVATION SYSTEM''')
        self.Scrolledlistbox1 = ScrolledListBox(self.PNotebook1_t1)
        self.Scrolledlistbox1.place(relx=0.026, rely=0.083, relheight=0.825
                , relwidth=0.938)
        self.Scrolledlistbox1.configure(background="white")
        self.Scrolledlistbox1.configure(font="TkFixedFont")
        self.Scrolledlistbox1.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox1.configure(selectbackground="#c4c4c4")
        self.PNotebook1.bind('<Button-1>',_button_press)
        self.PNotebook1.bind('<ButtonRelease-1>',_button_release)
        self.PNotebook1.bind('<Motion>',_mouse_over)
        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.428, rely=0.111, height=81, width=449)
        self.Label2.configure(background="#878787")
        self.Label2.configure(borderwidth="4")
        self.Label2.configure(font=font21)
        self.Label2.configure(text='''Railway Reservation System''')

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.024, rely=0.022, height=151, width=319)
        self.Label1.configure(background="#878787")
        photo_location = os.path.join(prog_location,"/home/navanith/Downloads/112211 (1).png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.Label1.configure(image=_img0)
        self.Label1.configure(text='''Label''')
        def dosomething():
   	        if mb.askyesno('verify','Really Quit ??'):
           	    top.destroy()
   	        else:
                   mb.showinfo('No','Quit has been cancelled !!!!!!!')
        top.protocol('WM_DELETE_WINDOW', dosomething)

# The following code is add to handle mouse events with the close icons
# in PNotebooks widgets.
def _button_press(event):
    widget = event.widget
    element = widget.identify(event.x, event.y)
    if "close" in element:
        index = widget.index("@%d,%d" % (event.x, event.y))
        widget.state(['pressed'])
        widget._active = index

def _button_release(event):
    widget = event.widget
    if not widget.instate(['pressed']):
            return
    element = widget.identify(event.x, event.y)
    try:
        index = widget.index("@%d,%d" % (event.x, event.y))
    except TclError:
        pass
    if "close" in element and widget._active == index:
        widget.forget(index)
        widget.event_generate("<<NotebookTabClosed>>")

    widget.state(['!pressed'])
    widget._active = None

def _mouse_over(event):
    widget = event.widget
    element = widget.identify(event.x, event.y)
    if "close" in element:
        widget.state(['alternate'])
    else:
        widget.state(['!alternate'])

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





